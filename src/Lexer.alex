{
module Lexer where
}

%wrapper "basic"

$digit = 0-9			-- digits
$alpha = [a-zA-Z]		-- alphabetic characters
$pound = \#                     -- command prefix

@int = $digit+
@str = $alpha+

@NAME_S = $pound s
@NAME_I = $pound i

@US = $pound US
@UM = $pound UM
@UIM = $pound UIM
@UP = $pound UP
@UG = $pound UG

@VAR = $pound V
@SORT = $pound S
@CONST = $pound C
@APP = $pound A
@LAM = $pound L
@PI = $pound P

@INFO = ($pound D) | ($pound I) | ($pound S) | ($pound C)

:-


{
-- Each action has type :: String -> Token

-- The token type:
data Token = TokenNameS | TokenNameI 
    | TokenUS | TokenUM | TokenUIM | TokenUP | TokenUG 
    | TokenVar | TokenSort | TokenConst | TokenApp | TokenLam | TokenPi
    | TokenInfo BinderInfo
    | TokenDI | TokenRI | TokenUNI | TokenDEF | TokenAX
    | TokenBind | TokenInd | TokenIntro | TokenEind | TokenInt Integer | TokenString String deriving (Eq,Show)

main = do
  s <- getContents
  print (alexScanTokens s)
}